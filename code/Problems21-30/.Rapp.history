sum_of_digits(2^1000)
warnings()
sum_of_digits(2^100)
getwd()
setwd("/Users/rileyde/Documents/Valassis/data_files")
setwd("/Users/rileyde/Documents/Valassis/")
list.files()
setwd("/Users/rileyde/Documents/Valassis/Data Files/df_data/")
list.files()
a = read.csv("Aggregate_offer_by_calendar_date.csv")
setwd("/Users/rileyde/Documents/Valassis/Data Files/df_data/bymonth/")
length(list.files())
system.time(#
for(i in 1:5){#
	if(i==1){#
		of <- read.csv("offer_by_calendar_date_1.csv")#
		next#
		}#
	filename <- paste("offer_by_calendar_date_", i, ".csv", sep="")#
	newdata <- read.csv(filename)#
	of <- rbind(of, newdata)#
}#
)
dim(of)
write.csv(of, "digital_offers_data_extract.csv")
system.time(#
for(i in 1:4){#
	if(i==1){#
		of <- read.csv("offer_by_calendar_date_1.csv")#
		next#
		}#
	filename <- paste("offer_by_calendar_date_", i, ".csv", sep="")#
	newdata <- read.csv(filename)#
	of <- rbind(of, newdata)#
}#
)
dim(of)
write.csv(of, "digital_offers_data_extract.csv")
system.time(#
for(i in 1:1){#
	if(i==1){#
		of <- read.csv("offer_by_calendar_date_1.csv")#
		next#
		}#
	filename <- paste("offer_by_calendar_date_", i, ".csv", sep="")#
	newdata <- read.csv(filename)#
	of <- rbind(of, newdata)#
}#
)
dim(of)
write.csv(of, "digital_offers_data_extract.csv")
x <- 4L
x
x <- c(4, TRUE)
x
is.numeric(x)
x <- list(2, "a", "b", TRUE)
x
x[[1]]
x[1]
x = 4L
x
is.numeric(4L)
setwd("/Users/rileyde/Documents/Project_Euler/Problems21-30")
list.files()
names = read.table("names.txt")
names = read.table("names.txt", header=F)
names = read.csv("names.txt", header=F)
length(names)
sort(names)
names
Letters
LETTERS
a = list()
a
letterScores = list()#
for(i in 1:26){#
	letterScores[LETTERS[i]] = i#
}
letterScores
strsplit("CHAD")
strsplit("CHAD", split="")
a = strsplit("CHAD", "")
a = strsplit("CHAD AN", "")
a
a[[1]]
a[[2]]
a[[1]][1]
for(i in a[[1]]){print i}
for(i in a[[1]]){print(i)}
letterScors["C"]
letterScores["C"]
letterScores["C"] * 5
nameScore = function(name){#
	#i.e. COLIN = 3 + 15 + 12 + 9 + 14 = 53#
	score = 0#
	name = strsplit(name)#
	for(i in name[[1]]){#
		score = score + letterScores[[i]]#
	}#
}
nameScore("COLIN")
nameScore = function(name){#
	#i.e. COLIN = 3 + 15 + 12 + 9 + 14 = 53#
	score = 0#
	name = strsplit(name, split="")#
	for(i in name[[1]]){#
		score = score + letterScores[[i]]#
	}#
}
nameScore("COLIN")
nameScore = function(name){#
	#i.e. COLIN = 3 + 15 + 12 + 9 + 14 = 53#
	score = 0#
	name = strsplit(name, split="")#
	for(i in name[[1]]){#
		score = score + letterScores[[i]]#
	}#
	return(score)#
}
nameScore = function(name){#
	#i.e. COLIN = 3 + 15 + 12 + 9 + 14 = 53#
	score = 0#
	name = strsplit(name, split="")#
	for(i in name[[1]]){#
		score = score + letterScores[[i]]#
	}#
	return(score)#
}
nameScore("COLIN")
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(names[i])#
}
names[1]
is.character(names[1])
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[i]))#
}
nameScore(as.character(names[1]))
as.character(names[1])
names[1]
names[[1]]
as.character(names[[1]])
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}
nameScore(as.character(names[[1]]))
i
names[3303]
names[3304]
names[3302]
names[3301]
names[3300]
as.character(names[[3303]])
nameScore = function(name){#
	#i.e. COLIN = 3 + 15 + 12 + 9 + 14 = 53#
	if(name == NA) return(15)#
	score = 0#
	name = strsplit(name, split="")#
	for(i in name[[1]]){#
		score = score + letterScores[[i]]#
	}#
	return(score)#
}
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}
nameScore = function(name){#
	#i.e. COLIN = 3 + 15 + 12 + 9 + 14 = 53#
	if(is.na(name)) return(15)#
	score = 0#
	name = strsplit(name, split="")#
	for(i in name[[1]]){#
		score = score + letterScores[[i]]#
	}#
	return(score)#
}
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}
nscores
nameAndScore <- data.frame(names, nscores)
dim(nameAndScore)
length(nscores)
length(names)
is.vector(names)
a = as.vector(names)
a
nameAndScore <- data.frame(as.vector(names), nscores)
dim(nameAndScore)
is.vector(nscores)
nameAndScore <- data.frame(as.vector(names))
dim(nameAndScore)
nameAndScore <- data.frame(t(as.vector(names)))
dim(nameAndScore)
nameAndScore <- cbind(nameAndScore, nscores)
dim(nameAndScore)
nameAndScore[1:10,]
nameAndScore <- nameAndScore[sort(nameAndScore[,1]),]
nameAndScore[1:10,]
names[1:10]
sort(names)[1:10]
names = sort(names)
names[1:10]
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}
nameAndScore <- data.frame(t(as.vector(names)))#
nameAndScore <- cbind(nameAndScore, nscores)
index <- c(1:length(names))#
#
nameAndScore <- data.frame(t(as.vector(names)))#
nameAndScore <- cbind(nameAndScore, c(index, nscores))
nameAndScore[1:10,]
nameAndScore <- data.frame(t(as.vector(names)))#
nameAndScore <- cbind(cbind(nameAndScore, index), nscores)
nameAndScore[1:10]
nameAndScore[1:10,]
totalNameScores = apply(nameAndScore, 1, nameAndScore$index * nameAndScore$nscores)
prod(2,3)
totalNameScores = apply(nameAndScore, 1, prod(index, nscores))
totalNameScores = apply(nameAndScore, 1, prod(nameAndScores[,2], nameAndScores[,3]))
totalNameScores = apply(nameAndScore[,c(2,3)], 1, prod)
totalNameScores[1:10]
sum(totalNameScores)
start = proc.time()#
#
#calculate name score for each name#
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}#
#
#name sort index#
index <- c(1:length(names))#
#
nameAndScore <- data.frame(t(as.vector(names)))#
nameAndScore <- cbind(cbind(nameAndScore, index), nscores)#
#
totalNameScores = apply(nameAndScore[,c(2,3)], 1, prod)#
#
elapsed = proc.time() - start
cat(paste("The solution is ", sum(totalNameScores), ", found in ", elapsed, " seconds", sep=""))
elapsed
cat(paste("The solution is ", sum(totalNameScores), ", found in ", elapsed[[3]], " seconds", sep=""))
names[1:100]
names[1:150]
a = read.table("names.txt", header=F, sep=",")
names[1:100]
names[1:150]
a[1:150]
a
nameScore = function(name){#
	#i.e. COLIN = 3 + 15 + 12 + 9 + 14 = 53#
	if(is.na(name)) return(15)#
	score = 0#
	name = strsplit(name, split="")#
	print(name)#
	for(i in name[[1]]){#
		score = score + letterScores[[i]]#
	}#
	return(score)#
}
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}
nameScore = function(name){#
	#i.e. COLIN = 3 + 15 + 12 + 9 + 14 = 53#
	if(is.na(name)) return(15)#
	score = 0#
	print(name)#
	name = strsplit(name, split="")#
	print(name)#
	for(i in name[[1]]){#
		score = score + letterScores[[i]]#
	}#
	return(score)#
}
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}
nameScore = function(name){#
	#i.e. COLIN = 3 + 15 + 12 + 9 + 14 = 53#
	if(is.na(name)) return(15)#
	score = 0#
	print(name)#
	name = strsplit(name, split="")#
	print(name[[1]])#
	for(i in name[[1]]){#
		score = score + letterScores[[i]]#
	}#
	return(score)#
}
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}
nameScore = function(name){#
	#i.e. COLIN = 3 + 15 + 12 + 9 + 14 = 53#
	if(is.na(name)) return(15)#
	score = 0#
	print(name)#
	name = strsplit(name, split="")#
	print(name[[1]])#
	for(i in name[[1]]){#
		score = score + letterScores[[i]]#
	}#
	print(score)#
	return(score)#
}
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}
26 + letterScores["U"]
26 + letterScores[["U"]]
47 + letterScores[["L"]]
59 + letterScores[["M"]]
names[938]
length(totalNameScores)
totalNameScores[938]
length(names)
length(a)
length(sort(a))
length(is.na(sort(a)))
length(which(is.na(sort(a)) == T)
)
length(which(is.na(a) == T)
)
length(sort(as.character(a)))
length(sort(a))
names = sort(as.character(names))
length(names)
names = read.csv("names.txt", header=F)
length(names)
length(sort(as.character(names)))
names = sort(as.character(names))
length(names)
nameScore = function(name){#
	#i.e. COLIN = 3 + 15 + 12 + 9 + 14 = 53#
	if(is.na(name)) return(15)#
	score = 0#
	name = strsplit(name, split="")#
	for(i in name[[1]]){#
		score = score + letterScores[[i]]#
	}#
	return(score)#
}
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}
i
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}
nscores[i]
nameScore(as.character(names[[1]]))
names[[1]]
names = read.csv("names.txt", header=F)
names(is.na(names)) <- "NA "
names = sort(names)
length(names)
length(is.na(names))
length(is.na(names) == T)
length(which(is.na(names) == T))
names = read.csv("names.txt", header=F)
names(is.na(names))
names[which(is.na(names)==T)]
names[which(is.na(names) == T))] <- "NA "
names[which(is.na(names) == T)] <- "NA "
names = read.csv("names.txt", header=F)#
names[which(is.na(names)==T)] <- "NA "
names = sort(names)
length(names)
names[1:100]
nameScore = function(name){#
	#i.e. COLIN = 3 + 15 + 12 + 9 + 14 = 53#
	if(is.na(name)) return(15)#
	score = 0#
	name = strsplit(name, split="")#
	for(i in name[[1]]){#
		score = score + letterScores[[i]]#
	}#
	return(score)#
}
start = proc.time()#
#
#calculate name score for each name#
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}#
#
#name sort index#
index <- c(1:length(names))#
#
nameAndScore <- data.frame(t(as.vector(names)))#
nameAndScore <- cbind(cbind(nameAndScore, index), nscores)#
#
totalNameScores = apply(nameAndScore[,c(2,3)], 1, prod)#
#
elapsed = proc.time() - start#
#
cat(paste("The solution is ", sum(totalNameScores), ", found in ", elapsed[[3]], " seconds", sep=""))
i
names[3627]
names = read.csv("names.txt", header=F)
which(is.na(names) == T)
names[3303] <- "N A"
names[3303]
names = read.csv("names.txt", header=F)
names[which(is.na(names)==T)] <- "N A"#
names = sort(names)
length(names)
length(which(is.na(names) == T))
start = proc.time()#
#
#calculate name score for each name#
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}#
#
#name sort index#
index <- c(1:length(names))#
#
nameAndScore <- data.frame(t(as.vector(names)))#
nameAndScore <- cbind(cbind(nameAndScore, index), nscores)#
#
totalNameScores = apply(nameAndScore[,c(2,3)], 1, prod)#
#
elapsed = proc.time() - start#
#
cat(paste("The solution is ", sum(totalNameScores), ", found in ", elapsed[[3]], " seconds", sep=""))
i
i
names[3627]
nameScore = function(name){#
	#i.e. COLIN = 3 + 15 + 12 + 9 + 14 = 53#
	if(name == "N A") return(15)#
	score = 0#
	name = strsplit(name, split="")#
	for(i in name[[1]]){#
		score = score + letterScores[[i]]#
	}#
	return(score)#
}
start = proc.time()#
#
#calculate name score for each name#
nscores = rep(0, length(names))#
for(i in 1:length(names)){#
	nscores[i] = nameScore(as.character(names[[i]]))#
}#
#
#name sort index#
index <- c(1:length(names))#
#
nameAndScore <- data.frame(t(as.vector(names)))#
nameAndScore <- cbind(cbind(nameAndScore, index), nscores)#
#
totalNameScores = apply(nameAndScore[,c(2,3)], 1, prod)#
#
elapsed = proc.time() - start#
#
cat(paste("The solution is ", sum(totalNameScores), ", found in ", elapsed[[3]], " seconds", sep=""))
library(methods)
?Classes
class(fit)
class(fit)
fit <- lm(c(1,2,3)~c(3,2,1))
fir
fit
class(fit)
class(lm)
mean
print
methods("mean")
methods("print")
print.lm(fit)
show
set.seed(2)
x <- rnorm(100)
mean(x)
head(getS3method("mean", "default"))
head(getS3method("mean"))
head(getS3method("mean", "method"))
head(getS3method("mean", "Date"))
as.ts(rnorm(100))
plot(as.ts(rnorm(100)))
setClass(turtle)
turtle = setClass()
setClass("turtle", representation(x="numeric",y="numeric"))
turtle
t1 <- new(turtle)
t1 <- new("turtle")
t1 <- new("turtle", 1,2)
turtle@x
t1@x
t1@x = 1
t1@x
setClass("polygon", representation(x = "numeric", y = "numeric"))#
#
setMethod("plot", "polygon", function (x,y, ...){#
	plot(x@x, x@y, type = "n", ...)#
	xp <- c(x@x, x@x[1])#
	yp <- c(x@y, x@y[1])#
	lines(xp, yp)#
})
showMethods("plot")
p <- new("polygon", x=c(1,2,3,4), y = c(1,2,3,4))#
plot(p)
p <- new("polygon", x=c(1,2,3,4), y = c(1,2,3,1))#
plot(p)
