#Project Euler Problem 12
#6/10/13

"""The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?"""

#import antigravity (xkcd)
                        ##                #
                       ####            # #
                      ######            #
                      ######             # 
                       ####               #   # 
                        ##                ####
                        ##               ####
                      #######           ####
                    ##########         ####
                   #######################
                  ##############
                  ##############
                  ##############
                  ##############
                   ############
                    ##########
                    #### ####
                   ####   ####
                  ####     ####
                 ####       ####
                ####         ####
             #######        #######
            ########        ########
            
            
            
            
###############################################################################  
          
import time
import math

start = time.time()

def triangularNum(n):
    #returns the nth triangular number, as defined atop this file
    return (n+1)*n/2
        
            
def numberOfFactors(n):
    #returns the number of factors (i.e. n=6, then 1,2,3,6, so would return 4)
    factor_count = 0
    for num in range(1,int(math.sqrt(n))+1):#range goes 'up to' second arg
        if n%num == 0:
            factor_count += 1
    if math.sqrt(n) - math.floor(math.sqrt(n)) == 0.0:
        return 2*factor_count - 1
    else:
        return 2*factor_count

        
    
factor_list = []
factors = 0
counter = 0
while factors < 500:
    counter += 1
    factors = numberOfFactors(triangularNum(counter))
    factor_list.append(factors)

print counter
print triangularNum(counter)      
print factors
print len(factor_list)
elapsed = time.time() - start
print elapsed
    
    