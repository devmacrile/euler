"""
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten 
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

import antigravity
                        ##                #
                       ####            # #
                      ######            #
                      ######             # 
                       ####               #   # 
                        ##                ####
                        ##               ####
                      #######           ####
                    ##########         ####
                   #######################
                  ##############
                  ##############
                  ##############
                  ##############
                   ############
                    ##########
                    #### ####
                   ####   ####
                  ####     ####
                 ####       ####
                ####         ####
             #######        #######
            ########        ########
            
"""
          
import time
import math

from eutil import clock


def triangular_number(n):
    """
    Returns the nth triangular number.
    """
    return ((n + 1) * n) / 2
        
            
def number_of_factors(n):
    factor_count = 0
    for num in range(1,int(math.sqrt(n))+1):#range goes 'up to' second arg
        if n%num == 0:
            factor_count += 1
    if math.sqrt(n) - math.floor(math.sqrt(n)) == 0.0:
        return 2*factor_count - 1
    else:
        return 2*factor_count


@clock
def main(debug=False):
    factor_list = []
    factors = 0
    counter = 0
    while factors < 500:
        counter += 1
        factors = number_of_factors(triangular_number(counter))
        factor_list.append(factors)
    
    if debug:
        print counter
        print triangular_number(counter)
        print factors
        print len(factor_list)
    return triangular_number(counter)

if __name__ == '__main__':
    main()    
    
