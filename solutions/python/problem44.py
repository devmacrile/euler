# -*- coding: utf-8 -*-
"""
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first 
ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their 
difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and 
difference are pentagonal and D = |Pk − Pj| is minimised; what is the 
value of D?
"""

"""
Let p be a function which calculates the nth pentagonal number.
Then:
    p(i) + p(j) = p(k)
    p(i) - p(j) = p(l)
=>
    2 * p(i) = p(k) + p(l)
    2 * p(j) = p(k) - p(l)
=>
    p(k) = 2 * p(i) - p(l)
    p(k) = 2 * p(j) + p(l)

With these equations, we search for the first p(k) (since it is
the largest, being the sum) while caching seen pentagonals s.t.
the above equations hold.
"""

from eutil import clock


pentagonal_number = lambda n: n * (3 * n - 1) // 2

@clock
def main():
    cache = set()
    i = 1
    while True:
        pentagonal_sum = pentagonal_number(i)
        for p in cache:
            if (2 * p - pentagonal_sum) in cache and (pentagonal_sum - p) in cache:
                solution = 2 * p - pentagonal_sum
                return solution
        i += 1
        cache.add(pentagonal_sum)
    return None


if __name__ == '__main__':
    main()